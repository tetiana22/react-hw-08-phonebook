{"version":3,"file":"static/js/31.090d21f7.chunk.js","mappings":"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","sources":["App/App.styled.jsx","components/redux/Contact/selectors.js","components/Contact/ContactList/ContactList.jsx","../node_modules/nanoid/index.browser.js","components/Contact/Form/Form.styled.jsx","components/Contact/Form/Form.jsx","components/Section/Section.styled.jsx","components/Section/Section.jsx","components/Contact/Filter/filter.styled.jsx","components/Contact/Filter/Filter.jsx","components/Pages/ContactPages.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n  width: 400px;\n  padding: 10px;\n  margin: 0 auto;\n`;\n\nexport const Wrapper = styled.div`\n  text-align: center;\n  font-size: 20px;\n`;\n","import { createSelector } from 'reselect';\n\nexport const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.filter;\nexport const selectError = state => state.contacts.error;\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const getVisibleContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n","import { useDispatch, useSelector } from 'react-redux';\nimport {\n  ListOfContact,\n  ContactItem,\n  Text,\n  Spinner,\n} from './ContactList.styled';\nimport {\n  selectIsLoading,\n  selectError,\n  getVisibleContacts,\n} from 'components/redux/Contact/selectors';\nimport { deleteContact } from 'components/redux/Contact/thunk';\nimport { toast } from 'react-toastify';\n\nconst ContactsList = () => {\n  const contacts = useSelector(getVisibleContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const dispatch = useDispatch();\n\n  const handleDelete = id => {\n    dispatch(deleteContact(id))\n      .then(() => {\n        toast.success('Contact successfully deleted');\n      })\n      .catch(() => {\n        toast.error('error');\n      });\n  };\n  return (\n    <>\n      {isLoading && <Spinner />}\n      {error && <Text>{error}</Text>}\n      <ListOfContact>\n        {contacts.map(contact => (\n          <ContactItem key={contact.id}>\n            {contact.name}: {contact.number}\n            <button\n              type=\"button\"\n              onClick={() => {\n                handleDelete(contact.id);\n              }}\n            >\n              Delete\n            </button>\n          </ContactItem>\n        ))}\n      </ListOfContact>\n    </>\n  );\n};\n\nexport default ContactsList;\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  alight-item: center;\n  font-size: 20px;\n  width: 200px;\n  padding: 12px;\n  margin: 0 auto;\n  background-color: #fff;\n  border: 2px solid #05438c;\n\n  transform-style: preserve-3d;\n  border-radius: 15px;\n  box-shadow: 3px 2px 0 1px #f9f9fb, -1px 0 28px 0 rgba(34, 33, 81, 0.01),\n    28px 28px 28px 0 rgba(34, 33, 81, 0.25);\n  transition: 0.4s ease-in-out transform, 0.4s ease-in-out box-shadow;\n  opacity: 0.8;\n`;\n\nexport const Input = styled.input`\n  margin-bottom: 20px;\n  padding: 8px 12px;\n  border: 2px solid #05438c;\n  windth: 100%;\n`;\nexport const Button = styled.button`\n\n  font-size: 16px;\n  letter-spacing: 1.3px;\n  font-weight: 700;\n  color: #05438c;\n  background: linear-gradient(90deg, rgba(129, 230, 217, 1) 0%, rgba(79, 209, 197, 1) 100%);\n  border: none;\n  border-radius: 500px;\n  box-shadow: 12px 12px 24px rgba(79, 209, 197, .64);\n  transition: all 0.3s ease-in-out 0s;\n  cursor: pointer;\n  outline: none;\n  position: relative;\n  padding: 10px;\n\n  &:before {\n    content: '';\n    border-radius: 1000px;\n    min-width: calc(200px + 12px);\n    min-height: calc(30px + 12px);\n    border: 6px solid #00FFCB;\n    box-shadow: 0 0 60px rgba(0, 255, 203, .64);\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    opacity: 0;\n    transition: all .3s ease-in-out 0s;\n  }\n\n  &:hover,\n  &:focus {\n    color: #313133;\n    transform: translateY(-6px);\n  }\n\n  &:hover:before,\n  &:focus:before {\n    opacity: 1;\n  }\n\n  &:after {\n    content: '';\n    width: 30px;\n    height: 30px;\n    border-radius: 100%;\n    border: 6px solid #00FFCB;\n    position: absolute;\n    z-index: -1;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    animation: ring 1.5s infinite;\n  }\n\n  &:hover:after,\n  &:focus:after {\n    animation: none;\n    display: none;\n  }\n}\n\n@keyframes ring {\n  0% {\n    width: 30px;\n    height: 30px;\n    opacity: 1;\n  }\n  100% {\n    width: 300px;\n    height: 300px;\n    opacity: 0;\n  }\n}`;\n","import { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { Form, Input, Button } from './Form.styled';\nimport { getVisibleContacts } from 'components/redux/Contact/selectors';\nimport { addContact } from 'components/redux/Contact/thunk';\n\nconst FormAddContact = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getVisibleContacts);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const contact = {\n      id: nanoid(),\n      name: event.currentTarget.elements.name.value,\n      number: event.currentTarget.elements.number.value,\n    };\n\n    const isInContacts = contacts.find(\n      ({ name }) => name.toLowerCase() === contact.name.toLowerCase()\n    );\n\n    if (isInContacts) {\n      toast.error(`${contact.name} is already in contacts`);\n      return;\n    }\n\n    dispatch(addContact(contact))\n      .then(() => {\n        toast.success('Contact successfully added');\n      })\n      .catch(() => {\n        toast.error('error');\n      });\n    event.currentTarget.reset();\n  };\n\n  return (\n    <>\n      <Form onSubmit={handleSubmit}>\n        <Input\n          htmlFor={nanoid()}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          placeholder=\"Enter name\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          id={nanoid()}\n          required\n        />\n\n        <Input\n          htmlFor={nanoid()}\n          type=\"tel\"\n          name=\"number\"\n          placeholder=\"Enter number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          id={nanoid()}\n          required\n        />\n\n        <Button type=\"submit\">Add Contact</Button>\n      </Form>\n    </>\n  );\n};\n\nexport default FormAddContact;\n","import styled from 'styled-components';\n\nexport const SectionWrap = styled.div`\n  margin: 0 auto;\n`;\n\nexport const SectionTitle = styled.h2`\n  text-align: center;\n  font-size: 32px;\n  letter-spacing: 2px;\n  color: #08376f;\n`;\n","import { SectionWrap, SectionTitle } from \"./Section.styled\"\n\nexport const Section = ({ title, children }) => {\n\n    return (\n        <SectionWrap>\n            <SectionTitle>{title}</SectionTitle>\n            {children}\n        </SectionWrap>\n    )\n}","import styled from 'styled-components';\n\nexport const FilterWrap = styled.div`\n  display: flex;\n  flex-direction: column;\n  alight-item: center;\n  font-size: 20px;\n  width: 200px;\n  padding: 12px;\n  margin: 0 auto;\n`;\n\nexport const Label = styled.label`\n  color: #05438c;\n  font-size: 20px;\n  margin-bottom: 5px;\n`;\n\nexport const Input = styled.input`\n  margin-bottom: 20px;\n  padding: 8px 12px;\n  windth: 100%;\n  border: 2px solid #05438c;\n  border-radius: 20px;\n`;\n","import React from 'react';\nimport { nanoid } from 'nanoid';\nimport { Label, Input, FilterWrap } from './filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getFilter } from 'components/redux/Contact/selectors';\nimport { setFilter } from 'components/redux/Contact/filterSlice';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n\n  const onChange = event => {\n    dispatch(setFilter(event.currentTarget.value));\n  };\n\n  return (\n    <FilterWrap>\n      <Label>Find contacts by name </Label>\n      <Input\n        type=\"text\"\n        value={filter}\n        id={nanoid()}\n        onChange={onChange}\n        placeholder=\"Please enter a name \"\n      />\n    </FilterWrap>\n  );\n};\n\nexport default Filter;\n","import { Container, Wrapper } from '../../App/App.styled';\nimport ContactsList from '../Contact/ContactList/ContactList';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from '../redux/Contact/selectors';\nimport { useEffect } from 'react';\nimport { fetchContacts } from '../redux/Contact/thunk';\nimport FormAddContact from 'components/Contact/Form/Form';\nimport { Section } from '../Section/Section';\nimport Filter from 'components/Contact/Filter/Filter';\n\nconst ContactPages = () => {\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  \n  return (\n    <Container>\n      <Section title=\"Phonebook\">\n        <FormAddContact />\n      </Section>\n      <Section title=\"Contacts\">\n        {contacts.length > 0 ? (\n          <Filter />\n        ) : (\n          <Wrapper>Your phonebook is empty. Add first contact!</Wrapper>\n        )}\n        {contacts.length > 0 && <ContactsList />}\n      </Section>\n    </Container>\n  );\n};\nexport default ContactPages;\n"],"names":["Container","styled","_templateObject","_taggedTemplateLiteral","Wrapper","_templateObject2","getContacts","state","contacts","items","getFilter","filter","selectError","error","selectIsLoading","isLoading","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","contact","name","includes","useSelector","dispatch","useDispatch","_jsxs","_Fragment","children","_jsx","Spinner","Text","ListOfContact","map","ContactItem","number","type","onClick","id","deleteContact","then","toast","catch","nanoid","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","Form","Input","Button","_templateObject3","onSubmit","event","preventDefault","currentTarget","elements","value","find","_ref","concat","addContact","reset","htmlFor","pattern","placeholder","title","required","SectionWrap","SectionTitle","Section","FilterWrap","Label","onChange","setFilter","useEffect","fetchContacts","FormAddContact","Filter","ContactsList"],"sourceRoot":""}